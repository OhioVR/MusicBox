Read this if you need to find stinkers, and eliminate them while preserving
the totality of the instrument register. Be as sure as you can be that you
find all the stinkers in your score before attempting to follow all 5 steps
because getting from the beginning to the end will take you about a 3 day 
trip on a decent 4 year old Ryzen cpu with 16 hyperthreads.

One thing you can do to make certain a file stinks, is to review your
instrument playlist with a handy dandy shell script that is automatically
generated by arranger.py in the diagnostics-logs folder.

When you find the instrument, and intensity you are looking for you can
find the bad file by executing:

./scale-check.py Philharmonia_healed violin forte_arco-normal

it will play that register and intensity for that instrument from the lowest
note it can, to the highest in semitone incriments. Pressing return
during the script will advance it to the next sample. Pressing any key and
then pressing return will add the sample to the 1a.scale-check-results.dat
file.

When you are satifsfied, run:

./Build-Philhartronia.sh

and it will all be healed and remade. Its just easier to running that
idempotent script than having to explain all the following stages
but you are welcome to follow along.



#############
# 1st step: #
#############

listen to a chromatic progression of the instrument to see if any of the notes
are off. The semitone is the most easily recognizable tone and it covers the
the full range of notes.

If you are debugging a song with off sounding notes try the playlists for
the instruments in the diagnostics-logs folder.

With scale-check.py You have to specify a sample library, an instrument, and a
match value

The match value is usually a loudness like fortissimo but it could be 
other things like gissando or whatever you need to listen to chromatically.

# Parameters from begin to end:
1. the sample collection
2. the instrument
3. the match string (usually a loudness) 

so you would do something like this:
./scale-check.py Philharmonia_healed flute _fortissimo_normal

The "stinkers" aka bad samples are kept in 1a.scale-check-results.dat

If you are listening to your beautiful composition and there are found to be
notes that seem to be out of place, there is a stinker in there somewhere
you'll need to clean out with this painstaking 5 step process.

#############
# 2nd step: #
#############

The "healed" collection is all the native samples plus a few replacements
that cover the samples that were eliminated (exemplified by the contents of 
scale-check-results.dat). Native sounds (the ones not changed) have a -z0-
after their original name and any healed note is above or below z0 (ie z-12,
z6, z-2). This indicates that the notes are healed, and how ugly the bandaid
is.

Decreasing the pitch of a sound is usually preferred over increasing it. So 
increased pitches should only be found on the top end of the scale where no 
sample above the missing sample is available to shift down to it. Rubberband-cli
pitch shifted samples can sound excellent as long as the shift is not too 
extreme.

If it is off by a few cents, one semitone shift isn't bad, but 19 semitones
may give questionable results because 10 cents off becomes a complete waste of
money. 10 cents off might be passible (not to all of course). But 20 cents is
too far for most musicians.

The Philharmonia collection is great but it has mislabled notes and not every
note is as close to the exact pitch we would like. So after exploding sample
collections full of pitch shifts in a vain effort to increase the "native" 
supply of more note lengths for get_sample.py to look into, I had
to step back and decide, only the missing notes should be filled.

viola_C7_05_piano_arco-normal-p-12.mp3

This indicates that the file is healed and has a pitchshift of -1 octaves

the native samples in the Philharmonia_healed directory are labled:
viola_A4_15_piano_arco-normal-p0-.mp3

Executing the script is easy, simply call it like this:
./2.heal_Philharmonia_collection.py

#############
# 3rd step: #
#############

Because bowed strings often have a lot of vibrato, it is necessary to handle
them differently than only stretching them. If they are stretched to 4x
speed it sounds very unnatural. But if the sample is internally crossfaded
then there is a lot of flexibility to make smaller versions of them.
So I limited this script to only process strings and only strings that are
labeled arco. Most bowed strings are longer than 0.6 seconds and to make a
convincing sound, or at least kinda convincing, we really do need more
samples to pull from. If you are a violinist and have a sound booth and
would like to take a crack at it, let me know.

./crossfade_arco.py

##########################
# 4th step: final filter #
##########################

Run this script:

./sample_filter.py

And all samples will be given a high pass filter below 320 hz. This has
the effect of eliminating some unwanted low frequency sounds that occur
the moment before a sound is struck espeically on bowed or plucked
instruments. Samples will also be given a tiny 1/15th second long
fade in and out to eliminate pops present in the files.


############
# 5th step #
############
After the samples are pruned and filled the final thing to do is rerun the 
database builder script by running it like this:

./database_builder.py Philhartronia



############
# 6th step #
############
Do it all over again because eventually you'll find some new stinker you didn't
catch. There are over 13000 samples provided by the Philharmonia Orchestra. 
It is possible I've missed something. 

Also, if another orchestra wanted to get involved, they could record their
own samples, and again, they may need to resort to this process if they
didn't properly automate their sample acquisition process. If an orchestra
DID want to make their own collection, please get in contact with me at
scott[a]ohiovr[*]com. I can make your lives easier doing it. I'd work for free
if you release the samples under a creative commons license in the same style as
the Philharmonia's donation. It can't be more restrictive for free service, but
it is of course welcome to be less restrictive. 


